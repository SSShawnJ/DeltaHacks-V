<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tour++ | DeltaHacks </title>
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <link href="css/bootstrap-theme.min.css" rel="stylesheet">
  <link href="css/font-awesome.min.css" rel="stylesheet">
  <link href="css/mystyles.css" rel="stylesheet">
  <link href="css/bootstrap-social.css" rel="stylesheet">
  <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        width: 100%;
        height:600px;
        padding: 20px;
      }

      html{
        margin:0;
      }
      
    </style>
</head>

<body>
  <div class="container">

    <div class="row row-content" style="background-color: black">
<div class="col-sm-12 col-xs-12">
  <h2 style="color:white;text-indent: 10px"><span class="glyphicon glyphicon-map-marker"></span> Tour++ |<small style="color:white;col-xs-12"> Your Fantastic Partner On The Way</small>
</h2>
</div>
</div>

<div class="row row-content" style="background-color:yellow;">
<div class="col-sm-12">
  <h3 class="col-xs-12"><span class="glyphicon glyphicon-search "></span> Manual Manipulations Control (Demo Only)</h3>
    <table>
      <tr>
          <td></td>
          <td> <button class="btn btn-primary"id="up" style="width:60px ;height:35px">Up</button></td>
          <td></td>
      </tr>
      <tr>
          <td> <button id="left" class="btn btn-primary" style="width:60px ;height:35px">Left</button></td>
          <td></td>
          <td><button id="right" class="btn btn-primary" style="width:60px ;height:35px">Right</button></td>
      </tr>
      <tr>
          <td></td>
          <td><button class="btn btn-primary" id="down" style="width:60px ;height:35px">Down</button></td>
          <td></td>
      </tr>
    </table>
    <br>

</div>
</div>


<div class="row row-content">
  <div id="map" style="width:100% col-xs-12" ></div>
</div>
    <div class="col-xs-12" style="background-color: black; height:30;">

<div>
  <h3 style="color:white; text-align: center; font-size: 10px;">     Copyright © 2019 – Tour++

</div>
</div>
</div>
</body>


<script>
      //current position
      var pos={lat: 37.8097222, lng: -122.4758889};
      var last_update_search_pos;
      var request = {
            location: pos,
            radius: '2000',
            types: ['point_of_interest','museum', 'art_gallery','park', 'zoo','stadium','university','church','aquarium'],
            rankby:'distance'
      };
      var map;
      var userLocation;
      var UserCircle;
      var markers=[];
      var markerCluster;
      var labels = 'ABC';

      var service;

      var places=[];

      // var image = 'https://pre00.deviantart.net/eed5/th/pre/i/2015/189/2/0/super_mario_by_davemilburn-d90i0qf.png';

      var queue=[];
      var hasInQueue={};
      var content={};


      refreshPage();

      readAvailabelGuide();


  function initMap() {


    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 16,
      center: pos,
      styles: [
        // { elementType: 'geometry', stylers: [{ color: '#043475' }] },
        // { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
        // { elementType: 'labels.text.fill', stylers: [{ color: '#e5a239' }] },
         {

           elementType: "labels.icon",
           stylers: [{ "visibility": "off" }]
         },
        // {
        //   featureType: 'road',
        //   elementType: 'geometry',
        //   stylers: [{ color: '#3a7ad1' }]
        // },
        // {
        //   featureType: 'road',
        //   elementType: 'geometry.stroke',
        //   stylers: [{ color: '#212a37' }]
        // },
        // {
        //   featureType: 'road',
        //   elementType: 'labels.text.fill',
        //   stylers: [{ color: '#9ca5b3' }]
        // },


        // {
        //   featureType: 'water',
        //   elementType: 'geometry',
        //   stylers: [{ color: '#17263c' }]
        // },
        // {
        //   featureType: 'water',
        //   elementType: 'labels.text.fill',
        //   stylers: [{ color: '#515c6d' }]
        // },
        // {
        //   featureType: 'water',
        //   elementType: 'labels.text.stroke',
        //   stylers: [{ color: '#17263c' }]
        // }
      ]


    });

    service = new google.maps.places.PlacesService(map);

    var image = {
        url: 'https://pre00.deviantart.net/eed5/th/pre/i/2015/189/2/0/super_mario_by_davemilburn-d90i0qf.png',
        // This marker is 20 pixels wide by 32 pixels high.
        scaledSize: new google.maps.Size(40, 40), // scaled size
                // The origin for this image is (0, 0).
        origin: new google.maps.Point(0, 0),
        // // The anchor for this image is the base of the flagpole at (0, 32).
        anchor: new google.maps.Point(20, 20)
      };


    userLocation = new google.maps.Marker({
      position: pos,
      map: map,
      icon: image,
      zIndex:1000
    });

    

    markers.push(userLocation);
    // for (var i = 0; i < 8; i++) {
    //   markers.push(new google.maps.Marker({
    //     icon: {
    //   path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
    //   strokeColor: '#CD2B8F',
      
    //   strokeWeight: 3,
    //   scale: 6,
    //     },
    //     map: map
    //   }));
    // }
    service.nearbySearch(request, callback);
    last_update_search_pos = userLocation.getPosition();


    UserCircle = new google.maps.Circle({
      strokeColor: 'blue',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: 'white',
      fillOpacity: 0.35,
      map: map,
      center: pos,
      radius: 100,
      zIndex: 1000
    });


    var up = document.getElementById('up');
    var down = document.getElementById('down');
    var left = document.getElementById('left');
    var right = document.getElementById('right');

    google.maps.event.addDomListener(right, 'click', function () {
      //go right
      if ((pos["lng"] + 0.0005) > 180) {
        pos["lng"] = pos["lng"] - 360;
      } else {
        pos["lng"] += 0.0005;
      }
      update();
    });


    google.maps.event.addDomListener(left, 'click', function () {
      //go left

      if ((pos["lng"] - 0.0005) < (-180)) {
        pos["lng"] = 360 + pos["lng"];
      } else {
        pos["lng"] -= 0.0005;
      }
      update();
    });

    google.maps.event.addDomListener(down, 'click', function () {
      // go down

      if ((pos["lat"] - 0.0005) >= (-90)) {
        pos["lat"] -= 0.0005;
        update();
      }

    });
    google.maps.event.addDomListener(up, 'click', function () {
      if ((pos["lat"] + 0.0005) <= 90) {
        pos["lat"] += 0.0005;
        update();
      }
    
    });
}


  function update() {
    map.setCenter(pos);
    userLocation.setPosition(pos);
    UserCircle.setCenter(pos);

  }

  function refreshPage() {

    setInterval(function () {

      updateMap();
      checkAvailableGuide();

    }, 2000);

  }


  // function refreshPage() {

  //   setInterval(function () {

  //     updateMap();
  //     checkAvailableGuide();

  //   }, 5000);

  // }


  function updateMap() {
    //do not update map if the user did not move much after the last update
    if(last_update_search_pos!=null && distance(last_update_search_pos, userLocation.getPosition()) >1000){
      service.nearbySearch(request, callback);
      console.log("Updated map nearbySearch");
      last_update_search_pos = userLocation.getPosition();
    }
  }

  function checkAvailableGuide(){
  places.map(function(pl){
    if(distance(pl.geometry.location, userLocation.getPosition()) <=100){

      if( !hasInQueue.hasOwnProperty(pl.name)){
        queue.push(pl);
        hasInQueue[pl.name]=true;
      }
      
    }
  });
}

function readAvailabelGuide(){
  setInterval(function () {
    // console.log(queue);

    if(queue.length>0){
      var landmark=queue.shift();
      var text;

      var WikiUrl='https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&callback=wikiCallback&redirects&titles='+landmark.name;

      $.ajax({
        url:WikiUrl,
        dataType: 'jsonp',
        //jsonp: "callback"
        success: function(response){
            console.log(response);

            if( !( typeof response === "undefined")){
                var k= Object.keys(response.query.pages);
                text=response.query.pages[k[0]].extract;
                console.log(text);
                if( ( typeof text === "undefined") || text==''){
                  text=landmark.name;
                  if (!responsiveVoice.isPlaying()){
                    responsiveVoice.speak("You are at the "+landmark.name+".", "US English Female",{rate:0.9});
                  }
                  return
                }
            //Get mothed
            // var parameters={url:response[3][0]};
            // $.get('/geturl',parameters,function(data){
            //   text=data;
            // });

            // content[landmark.name]=text;
            console.log(responsiveVoice.isPlaying());
                if (responsiveVoice.isPlaying()){
                  responsiveVoice.cancel();
                  wait(2000);
                }


                responsiveVoice.speak("You are at the "+landmark.name+". "+text, "US English Female",{rate:0.9});
            }else{
              if (!responsiveVoice.isPlaying()){
                responsiveVoice.speak("You are at the "+landmark.name+".", "US English Female",{rate:0.9});
              }
            }

            hasInQueue[landmark.name] = false;
            
        }

       });

    }

  },2000);
}

function wait(ms){
       var start = new Date().getTime();
       var end = start;
       while(end < start + ms) {
         end = new Date().getTime();
      }
    }
//places[2].photos[0].getUrl
  function callback(results, status) {
    // console.log(results);
    // places=[];

    for(i=0;i<results.length;i++){
      var find = false;
      for(j=0;j<markers.length;j++){
        if(results[i] != undefined && results[i].name == markers[j].getTitle()){
          find = true;
          break;
        }
      }

      if (!find){
        index = markers.length;
        // console.log(index,results[i].photos)
        var icon_image;
        var image_url = undefined
        if (results[i] !=undefined && results[i].photos !=undefined){
          image_url = results[i].photos[0].getUrl();
        }

        if (image_url ==undefined){ 
          icon_image = {
            path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
            strokeColor: '#CD2B8F',
            
            strokeWeight: 3,
            scale: 6,
          }
        }else{
          // var shape = {
          // coords: [20,20,5],
          // type: 'circle'
          // };


          icon_image =  {
            url: image_url,
            // This marker is 20 pixels wide by 32 pixels high.
            scaledSize: new google.maps.Size(40, 40), // scaled size
                    // The origin for this image is (0, 0).
            origin: new google.maps.Point(0, 0),

            labelOrigin: new google.maps.Point(20, 45),

            // shape: shape,
            // // The anchor for this image is the base of the flagpole at (0, 32).
            // anchor: new google.maps.Point(20, 20)
          };
        }

        

        markers.push(new google.maps.Marker({
          icon: icon_image,
          map: map
        }));
        markers[index].setPosition(results[i].geometry.location);
        markers[index].setTitle(results[i].name);
        markers[index].setLabel({text:results[i].name,fontSize: "10px"});
        
        markers[index].setMap(map);

        places.push(results[i]);
      }
    }
    // console.log(places);

    // if(results.length < markers.length-1){
    //   var i;
    //   for(i=1;i<results.length;i++){
    //     markers[i].setPosition(results[i].geometry.location);
    //     markers[i].setTitle(results[i].name);
    //     markers[i].setLabel(results[i].name);
    //     markers[i].setMap(map);

    //     places.push(results[i]);
    //   }

    //   for(i;i<markers.length;i++){
    //     markers[i].setMap(null);
    //   }

    // }else{
    //   for(var i=1;i<markers.length;i++){
    //     markers[i].setPosition(results[i].geometry.location);
    //     markers[i].setTitle(results[i].name);
    //     markers[i].setLabel(results[i].name);
    //     markers[i].setMap(map);
    //     places.push(results[i]);
    //   }

    // }
  }


</script>

<script src="libs/jquery.min.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCoalxf3cWk2d0X2ifrobf-ifYPYcBPsyw&callback=initMap&libraries=places,geometry">
</script>
<script src="js/bootstrap.min.js"></script>
<script src="script/script.js"></script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>

<!-- <script src="http://code.responsivevoice.org/responsivevoice.js"></script> -->
<script src='https://code.responsivevoice.org/responsivevoice.js'></script>

</html>
